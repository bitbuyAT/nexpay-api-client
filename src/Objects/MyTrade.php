<?php

namespace bitbuyAT\Nexpay\Objects;

class MyTrade
{
    /**
     * @var array
     */
    protected $data;

    public function __construct(array $data)
    {
        $this->data = $data;
    }

    /**
     * Trade ID.
     * Trade ID on the exchange
     * integer.
     */
    public function tradeId(): int
    {
        return $this->data['tradeId'];
    }

    /**
     * Symbol.
     * Instrument symbol
     * string (e.g. BTCEUR).
     */
    public function symbol(): string
    {
        return $this->data['symbol'];
    }

    /**
     * Side.
     * Side of the client order
     * buy or sell.
     */
    public function side(): string
    {
        return $this->data['side'];
    }

    /**
     * Original Order ID.
     * Order ID on the exchange
     * integer.
     */
    public function originalOrderId(): int
    {
        return $this->data['originalOrderId'];
    }

    /**
     * Client Order ID.
     * Unique order ID generated by client. From 8 to 32 characters
     * string.
     */
    public function clientOrderId(): string
    {
        return $this->data['clientOrderId'];
    }

    /**
     * Execution Quantity
     * Trade size, in natural currency units (e.g. 1.00000001 for BTCEUR when representing 1 bitcoin and 1 satoshi)
     * decimal as string.
     */
    public function execQuantity(): string
    {
        return $this->data['execQuantity'];
    }

    /**
     * Execution Price
     * Trade price
     * decimal as string.
     */
    public function execPrice(): string
    {
        return $this->data['execPrice'];
    }

    /**
     * Timestamp
     * Trade timestamp, in milliseconds
     * integer.
     */
    public function timestamp(): int
    {
        return $this->data['timestamp'];
    }

    /**
     * Fee.
     * Fee for the trade, negative value means rebate
     * decimal as string.
     */
    public function fee(): string
    {
        return $this->data['fee'];
    }

    /**
     * Is Liquidity Provided.
     * If true then client order was liquidity provider (maker) if false then liquidity taker
     * boolean.
     */
    public function isLiqProvided(): bool
    {
        return $this->data['isLiqProvided'];
    }

    /**
     * Fee currency.
     * Currency of the fee, e.g. EUR
     * string.
     */
    public function feeCurrency(): string
    {
        return $this->data['feeCurrency'];
    }

    /**
     * Account.
     * Account number
     * string.
     */
    public function account(): string
    {
        return $this->data['account'];
    }

    /**
     * Whole data array.
     */
    public function getData(): array
    {
        return $this->data;
    }
}
